%\documentclass[12pt]{article}
\documentclass[a4paper, 10pt]{article}
\usepackage{graphicx}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage[backend=bibtex, sorting=none]{biblatex}
\bibliography{references}

% Preamble:
\addtolength{\oddsidemargin}{-.875in}
	\addtolength{\evensidemargin}{-.875in}
	\addtolength{\textwidth}{1.75in}

	\addtolength{\topmargin}{-.875in}
	\addtolength{\textheight}{1.75in}
\title{\bf \bf Respiratory Viral Data Set: Random Forest on 104 Sujects Data at 0 and 48 Hour}
\author{Ghanshyam Verma}
\date{}

% add references here
\begin{filecontents*}{references.bib}


\end{filecontents*}
% Document:
\begin{document}
% 
% mean(1:10)
% plot(1:10)
\maketitle
%\tableofcontents



\section{Random Forest on 104 Subjects Data at 0 and 48 Hour}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
## Loading data set 
#Libraries 
library(class)
library(caret)
library(randomForest)
library(mlbench)

# Set working directory
getwd()
setwd("/Users/ghanshyamverma/Documents/Respiratory_Data/Results_104_Sujects_0_48_Hours")
@


<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Read the labeled gene expression data
All_104_Subjects_0_48_Hours <- read.csv("Data_104_Subjects_0_48_Hours.csv", 
                                      header = TRUE, sep = ",")


# Display the data
All_104_Subjects_0_48_Hours[c(1:7),c(1:7)] # show first 7 rows

# Display the dimensions (rows columns)
(dim(All_104_Subjects_0_48_Hours))


@


\section{Data Partitoining into Training and Test Set}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
## Dividing data set into train (70%) and test (30%) using createDataPartition function of caret package
set.seed(1234)
index_Train <- createDataPartition(y = All_104_Subjects_0_48_Hours$Label, 
                                   p = 0.78, list = FALSE, times = 1)
g_train_data <- All_104_Subjects_0_48_Hours[index_Train, ]
g_test_data <- All_104_Subjects_0_48_Hours[-index_Train, ]

# Display the dimensions (rows columns)
(dim(g_train_data))
(dim(g_test_data))

# Converting class labels into categorical variable
g_train_data[["Label"]] = factor(g_train_data[["Label"]])
g_test_data[["Label"]] = factor(g_test_data[["Label"]])

@

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Enable Parallel Processing
library(doSNOW)
library(doParallel)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
pt<-proc.time()

set.seed(1234)

## Training the model
# Defining trainControl parameters
cross_validation_10_fold <- trainControl(method = "repeatedcv", # apply repeated CV
                                         number = 10, # 10 fold cv 
                                         repeats = 3, # 3 repititions of CV
                                         search="grid")  
# defining evaluation metric
metric <- "Accuracy"


# ntree: parameter that allows number of trees to grow
# The mtry parameter setting: Number of variables selected as candidates at each split.
# Square root of number of features
mtry <- floor(sqrt(ncol(g_train_data)))

# Passing parameter into tunegrid
tunegrid <- expand.grid(.mtry=mtry)
set.seed(1234)

# training the model
RF_train1 <- train(Label~.,  # Class labels of training data
                   data = g_train_data, # Training Data
                   method = "rf", # Train using Random Forest
                   metric= metric, # Passing "Accuracy" as evaluation matric 
                   tuneGrid=tunegrid, # Passing tunegrid for tuning parameters
                   # Number of trees
                   ntree = 10001,
                   # Passing training control parameters
                   trControl = cross_validation_10_fold)

# Stop Parallel Processing
proc.time()-pt
stopCluster(cl)

# Save the trained model for future use
save(RF_train1, file = "RF_train1_104_sub_0_48_Hours.rda")

# Important Genes
(varImp(RF_train1))

# Save the results of trained model in a file
RF_train_104_sub_0_48_Hours_VarIMP_1 <- varImp(RF_train1)
write.table(RF_train_104_sub_0_48_Hours_VarIMP_1$importance, file = "RF_train_104_sub_0_48_Hours_VarIMP_1.tsv", sep = "\t")

# Display the trained model
print(RF_train1)

# Training set prediction
Train_Predict1 <- predict(RF_train1)
write.table(Train_Predict1, file = "Train_Predict1.tsv", sep = "\t")
@

\subsection{Random Forest: Test Set Prediction}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Predicting Test Set 
# Passing test data without labels (without fist column which contains labels)
(testPrediction <- predict(RF_train1, newdata = g_test_data[,2:12024]))

# Predict the class probability
Class_probability1 <- predict(RF_train1, type = "prob")
write.table(Class_probability1, file = "Class_probability1.tsv", sep = "\t")

# Test data set
(g_test_data$Label)
@

\subsection{Random Forest: Performance Measure}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Display confusion matrix
(confusionMatrix(testPrediction, g_test_data$Label))

@


\end{document} 