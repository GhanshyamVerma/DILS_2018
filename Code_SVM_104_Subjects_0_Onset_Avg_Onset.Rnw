%\documentclass[12pt]{article}
\documentclass[a4paper, 10pt]{article}
\usepackage{graphicx}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage[backend=bibtex, sorting=none]{biblatex}
\bibliography{references}

% Preamble:
\addtolength{\oddsidemargin}{-.875in}
	\addtolength{\evensidemargin}{-.875in}
	\addtolength{\textwidth}{1.75in}

	\addtolength{\topmargin}{-.875in}
	\addtolength{\textheight}{1.75in}
\title{\bf \bf Respiratory Viral Data Set: SVM on 104 Subjects Data at 0 and Onset or Average Onset Time}
\author{Ghanshyam Verma}
\date{}

% add references here
\begin{filecontents*}{references.bib}


\end{filecontents*}
% Document:
\begin{document}
% 
% mean(1:10)
% plot(1:10)
\maketitle
%\tableofcontents

\section{SVM on 104 Subjects Data at 0 and Onset or Average Onset Time}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
## Loading data set 
#Libraries 
library(class)
library(caret)
library(dplyr) # For efficient access of dataframes 
library(pROC) # For Plotting the ROC curves
library(ggplot2)

# Set working directory
getwd()
setwd("/Users/ghanshyamverma/Documents/Respiratory_Data/Results_104_Subjects_0_Onset_Avg_Onset/SVM")
@


<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Read the labeled gene expression data
All_104_Subjects_0_Onset_Avg_Onset <- read.csv("Data_104_Subjects_0_n_Onset_Avg_Onset_Time.csv", 
                                      header = TRUE, sep = ",")


# Display the data
All_104_Subjects_0_Onset_Avg_Onset[c(1:7),c(1:7)] # show first 7 rows

# Display the dimensions (rows columns)
(dim(All_104_Subjects_0_Onset_Avg_Onset))

##write.csv(All_104_Subjects_0_Onset_Avg_Onset, file = "Data_104_Subjects_0_Onset_Avg_Onset_Final.csv")

@
\section{Data Partitioning into Training and Test Set}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
## Dividing data set into train (78%) and test (22%) using createDataPartition function of caret package
set.seed(1234)
index_Train <- createDataPartition(y = All_104_Subjects_0_Onset_Avg_Onset$Label, p = 0.78, list = 
                                      FALSE)
g_train_data <- All_104_Subjects_0_Onset_Avg_Onset[index_Train, ]
g_test_data <- All_104_Subjects_0_Onset_Avg_Onset[-index_Train, ]

# Display the dimensions (rows columns)
(dim(g_train_data))
(dim(g_test_data))

# Converting class labels into categorical variable
g_train_data[["Label"]] = factor(g_train_data[["Label"]])

@
\section{Linear SVM model}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Enable Parallel Processing
library(doSNOW)
library(doParallel)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
pt<-proc.time()

set.seed(1234)
cross_validation_10_fold <- trainControl(method = "repeatedcv", # apply repeated CV
                                         number = 10, # 10 fold cv 
                                         repeats = 3)  # 3 repititions of CV
                                         
set.seed(1234)
(svm_train <- train(Label~., # Class labels of training data
                   data = g_train_data,  # Training Data
                   method = "svmLinear", # Train using linear kernel
                   trControl = cross_validation_10_fold))

# Stop Parallel Processing
proc.time()-pt
stopCluster(cl)
@

\subsection{Linear SVM: Test Set Prediction}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Predicting Test Set 
# Passing test data without labels (without fist column which contains labels)
(testPrediction <- predict(svm_train, newdata = g_test_data[,2:12024]))

# Test data set
(g_test_data$Label)
@

\subsection{Linear SVM: Performance Measure}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Display confusion matrix
(confusionMatrix(testPrediction, g_test_data$Label))

@

\section{Linear SVM: Tune Linear SVM Parameters}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Enable Parallel Processing
library(doSNOW)
library(doParallel)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
pt<-proc.time()

# Assigning values to the parameter C
grid <- expand.grid(C = c(2^-5, 2^-3, 2^-1, 1, 2^1, 3, 5, 2^3, 2^5,
                          2^7, 2^9, 2^11, 2^13, 2^15))

set.seed(1234)
(svm_train_linear_tuned <- train(Label~., # Class labels of training data
                                data = g_train_data,  # Training Data
                                method = "svmLinear", # Train using linear kernel
                                tuneGrid = grid, # Passing grid for tuning
                                trControl = cross_validation_10_fold)) # Cross validation setting

# Stop Parallel Processing
proc.time()-pt
stopCluster(cl)

# Plot tuned linear svm (Trained Model)
plot(svm_train_linear_tuned)
@ 

\subsection{Linear SVM: Test Set Prediction using Tuned Linear SVM}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Predicting Test Set 
# Passing test data without labels (without fist column which contains labels)
(testPrediction_tuned_L_SVM <- predict(svm_train_linear_tuned, newdata = g_test_data[,2:12024]))

# Test data set
(g_test_data$Label)
@

\subsection{Non-Linear SVM: Performance Measure using RBF SVM}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Display confusion matrix
(confusionMatrix(testPrediction_RBF_SVM, g_test_data$Label))

@

\section{Tune Non-Linear SVM Parameters}
<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Enable Parallel Processing
library(doSNOW)
library(doParallel)
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
pt<-proc.time()

# Assigning values to the parameter C
gridRBF <- expand.grid(sigma = c(2^-25, 2^-23, 2^-21, 2^-19, 2^-17,2^-15, 
                                 2^-13, 2^-11, 2^-9, 2^-7, 2^-5, 2^-3, 
                                 2^-1, 1, 2^1, 3, 5, 2^3),
                           C = c(2^-5, 2^-3, 2^-1, 1, 2^1, 3, 5, 2^3, 2^5,
                                 2^7, 2^9, 2^11, 2^13, 2^15))

set.seed(1234)
(svm_train_RBF_tuned <- train(Label~., # Class labels of training data
                                data = g_train_data,  # Training Data
                                method = "svmRadial", # Use RBF Kernel
                                #preProcess = "range", # range between 0 to 1
                                tuneGrid = gridRBF, # Passing grid parameter 
                                trControl = cross_validation_10_fold)) # Passing cross validation values

# Stop Parallel Processing
proc.time()-pt
stopCluster(cl)

# Plot tuned linear svm (Trained Model)
plot(svm_train_RBF_tuned)
@ 

\subsection{Non-Linear SVM: Test Set Prediction using Tuned RBF SVM}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Predicting Test Set 
# Passing test data without labels (without fist column which contains labels)
(testPrediction_tuned_RBF_SVM <- predict(svm_train_RBF_tuned, newdata = g_test_data[,2:12024]))

# Test data set
(g_test_data$Label)
@

\subsection{Non-Linear SVM: Performance Measure using Tuned RBF SVM}

<<include=TRUE, message=FALSE, warning=FALSE, error=FALSE>>=
# Display confusion matrix
(confusionMatrix(testPrediction_tuned_RBF_SVM, g_test_data$Label))

@


\end{document} 